{
    parserClass='org.rust.lang.core.parser.RustParser'
    parserUtilClass="org.rust.lang.core.parser.RustParserUtil"

    implements='org.rust.lang.core.psi.RustCompositeElement'
    extends='org.rust.lang.core.psi.impl.RustCompositeElementImpl'

    elementTypeHolderClass='org.rust.lang.core.psi.RustCompositeElementTypes'

    elementTypeClass='org.rust.lang.core.psi.RustCompositeElementType'
    tokenTypeClass='org.rust.lang.core.lexer.RustTokenType'

    psiClassPrefix='Rust'
    psiImplClassSuffix='Impl'
    psiPackage='org.rust.lang.core.psi'
    psiImplPackage='org.rust.lang.core.psi.impl'

    parserImports='static org.rust.lang.core.lexer.RustTokenElementTypes.*'


    tokens = [
        LBRACE               =  '{'
        RBRACE               =  '}'
        LBRACK               =  '['
        RBRACK               =  ']'
        LPAREN               =  '('
        RPAREN               =  ')'
        COLON                =  ':'
        COLONCOLON           =  '::'
        SEMICOLON            =  ';'
        COMMA                =  ','
        EQ                   =  '='
        EXCLEQ               =  '!='
        EQEQ                 =  '=='
        SHA                  =  '#'
        SHEBANG              =  '#!'
        EXCL                 =  '!'
        PLUSEQ               =  '+='
        PLUS                 =  '+'
        MINUSEQ              =  '-='
        MINUS                =  '-'
        OROR                 =  '||'
        OREQ                 =  '|='
        ANDAND               =  '&&'
        ANDEQ                =  '&='
        AND                  =  '&'
        OR                   =  '|'
        LT                   =  '<'
        XOREQ                =  '^='
        XOR                  =  '^'
        MULEQ                =  '*='
        MUL                  =  '*'
        DIVEQ                =  '/='
        DIV                  =  '/'
        REMEQ                =  '%='
        REM                  =  '%'
        GT                   =  '>'
        ELLIPSIS             =  '...'
        DOT                  =  '.'
        DOTDOT               =  '..'
        FAT_ARROW            =  '=>'
        ARROW                =  '->'
        Q                    =  '?'
        AT                   =  '@'

        // DEBUG

        ABSTRACT  = 'abstract'
        ALIGNOF   = 'alignof'
        AS        = 'as'
        BECOME    = 'become'
        BOX       = 'box'
        BREAK     = 'break'
        CONST     = 'const'
        CONTINUE  = 'continue'
        CRATE     = 'crate'
        DO        = 'do'
        ELSE      = 'else'
        ENUM      = 'enum'
        EXTERN    = 'extern'
        FALSE     = 'false'
        FINAL     = 'final'
        FN        = 'fn'
        FOR       = 'for'
        IF        = 'if'
        IMPL      = 'impl'
        IN        = 'in'
        LET       = 'let'
        LOOP      = 'loop'
        MACRO     = 'macro'
        MATCH     = 'match'
        MOD       = 'mod'
        MOVE      = 'move'
        MUT       = 'mut'
        OFFSETOF  = 'offsetof'
        OVERRIDE  = 'override'
        PRIV      = 'priv'
        PROC      = 'proc'
        PUB       = 'pub'
        PURE      = 'pure'
        REF       = 'ref'
        RETURN    = 'return'
        CSELF     = 'Self'
        SELF      = 'self'
        SIZEOF    = 'sizeof'
        STATIC    = 'static'
        STRUCT    = 'struct'
        SUPER     = 'super'
        TRAIT     = 'trait'
        TRUE      = 'true'
        TYPE      = 'type'
        TYPEOF    = 'typeof'
        UNSAFE    = 'unsafe'
        UNSIZED   = 'unsized'
        USE       = 'use'
        VIRTUAL   = 'virtual'
        WHERE     = 'where'
        WHILE     = 'while'
        YIELD     = 'yield'

        SHEBANG_LINE = '#!'

        // _DBG
        identifier  = 'regexp:\p{Alpha}\w*'
        space       = 'regexp:\s+'
    ]

    mixin       ("pat_ident") = "org.rust.lang.core.psi.impl.mixin.RustPatIdentImplMixin"
    implements  ("pat_ident") = "org.rust.lang.core.psi.RustNamedElement"

    implements  ("fn_item") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("fn_item") = "org.rust.lang.core.psi.impl.mixin.RustFnItemImplMixin"

    elementType(".*_bin_expr")   = binary_expr
    elementType(".*_range_expr") = range_expr

    extends("impl_method") = "org.rust.lang.core.psi.impl.RustNamedElementImpl"
    extends(".*_item")     = "org.rust.lang.core.psi.impl.RustNamedElementImpl"

    extends(".*_expr") = expr
    extends(".*_stmt") = stmt
    extends("pat_.*")  = pat
    extends(".*_attr") = attr

    generateTokens=false
    generateTokenAccessors=true
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Root
///////////////////////////////////////////////////////////////////////////////////////////////////

crate ::= [ SHEBANG_LINE ] [ inner_attrs ] item *

///////////////////////////////////////////////////////////////////////////////////////////////////
// Attributes
///////////////////////////////////////////////////////////////////////////////////////////////////

private inner_attrs ::= inner_attr +
inner_attr ::= SHEBANG LBRACK meta_item RBRACK | INNER_DOC_COMMENT

meta_item ::= IDENTIFIER [ EQ lit | LPAREN meta_seq RPAREN ]
private meta_seq ::= meta_item [ COMMA meta_seq? ]

private outer_attrs ::= outer_attr +
outer_attr ::= SHA LBRACK meta_item RBRACK | OUTER_DOC_COMMENT

fake attr ::=

///////////////////////////////////////////////////////////////////////////////////////////////////
// Items
///////////////////////////////////////////////////////////////////////////////////////////////////

private vis ::= PUB?

item ::= outer_attrs? vis?
       ( stmt_item
       | mod_item
       | item_macro)

stmt_item ::= static_item
            | const_item
            | type_item
            | block_item_group
            | view_item


private block_item_group ::= fn_item
                           | unsafe_fn_item
                           | mod_item
                           | foreign_mod_item
                           | struct_item
                           | enum_item
                           | trait_item
                           | impl_item


///////////////////////////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////////////////////////

fn_item ::= FN IDENTIFIER generic_params fn_params ret_type? where_clause? inner_attrs_and_block {
   pin(".*")=2
   recoverWhile="fn_item_recover"
}

foreign_fn_item ::= FN IDENTIFIER generic_params fn_decl_allow_variadic where_clause? SEMICOLON

private fn_decl_allow_variadic   ::= fn_params_allow_variadic ret_type?
private fn_params_allow_variadic ::= LPAREN params COMMA DOTDOTDOT RPAREN
                                   | LPAREN params COMMA RPAREN
                                   | LPAREN params RPAREN
                                   | LPAREN RPAREN


generic_params ::= [ generic_params_inner ]

private generic_params_inner ::= LT lifetimes [ COMMA [ type_params COMMA? ] ] GT
                               | LT                     type_params COMMA?     GT
                            /* | LT lifetimes                         GTGT
                               | LT lifetimes COMMA                   GTGT */
                            /* | LT lifetimes COMMA type_params       GTGT
                               | LT lifetimes COMMA type_params COMMA GTGT */
                            /* | LT                 type_params SHR
                               | LT                 type_params COMMA SHR */

lifetimes ::= lifetime_and_bounds (COMMA lifetime_and_bounds)*

private lifetime_and_bounds ::= LIFETIME lifetime_bounds? | STATIC_LIFETIME
private lifetime_bounds     ::= COLON lifetime (PLUS lifetime)*

private type_params ::= type_param (COMMA type_params)*

type_param ::= [ IDENTIFIER Q ] IDENTIFIER type_param_bounds? type_param_default?

type_param_bounds   ::= COLON [ type_param_bound_seq ]
type_param_default  ::= EQ type_sum

type_sum    ::= type [ PLUS bounds ]
type_sums   ::= type_sum !EQ (COMMA type_sum !EQ)*

private type_param_bound_seq        ::= polybound type_param_bound_seq_right
private type_param_bound_seq_right  ::= [ PLUS polybound type_param_bound_seq_right ]

polybound ::= [ FOR LT lifetimes? GT | Q ] bound

bound   ::= lifetime | trait_ref
bounds  ::= bound (PLUS bound)*


where_clause ::= WHERE  <<comma_separated_list where_pred>>

where_pred ::= for_lifetimes? (lifetime COLON bounds | type type_param_bounds)

for_lifetimes ::= FOR LT lifetimes GT

private fn_item_recover ::= !(<< skipUntilEOL >>)

fn_params ::= LPAREN !COMMA params COMMA? RPAREN    { pin(".*")=1 }
ret_type  ::= ARROW (type | EXCL)                   { pin=1 }

private params ::= [ param (COMMA param)* ]

param ::= pat COLON type_sum

pat ::= pat_wild
      | pat_reg
      | pat_tup
      | pat_vec
      | pat_macro
      | pat_ident
      | pat_struct
      | pat_enum
      | pat_range
      | pat_uniq
      | pat_qual_path
   /* | SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident */

pat_qual_path   ::= qual_path_no_types
pat_uniq        ::= BOX pat

pat_ident       ::= binding_mode IDENTIFIER [AT pat]
                  |              IDENTIFIER AT pat

pat_struct      ::= path_with_colons LBRACE pat_struct_fields RBRACE
pat_enum        ::= path_with_colons LPAREN (DOTDOT | pat_tup_elts) RPAREN

pat_range ::= lit_or_path [ DOTDOTDOT lit_or_path ]

pat_tup ::= LPAREN [ pat_tup_elts COMMA? ] RPAREN
pat_vec ::= LBRACK pat_vec_elts RBRACK

private pat_tup_elts ::= pat (COMMA pat)*
private pat_vec_elts ::= [ pat_tup_elts COMMA? ] [ DOTDOT [ COMMA pat_tup_elts COMMA? ] ]

pat_reg ::= AND MUT? pat
          | ANDAND pat

pat_wild ::= UNDERSCORE

private lit_or_path ::= path_with_colons | lit | MINUS lit

generic_args ::= LT generic_values GT
            /* | LT generic_values GTGT */
            /* | LT generic_values GTEQ */
            /* | LT generic_values GTGTEQ */
            /* | LTLT ty_qualifie   d_path_and_generic_values GT
               | LTLT ty_qualified_path_and_generic_values GTGT
               | LTLT ty_qualified_path_and_generic_values GTEQ
               | LTLT ty_qualified_path_and_generic_values GTGTEQ */

private generic_values ::= lifetimes [COMMA type_sums_and_or_bindings] COMMA?
                         | type_sums_and_or_bindings?
private type_sums_and_or_bindings ::=                   bindings   COMMA?
                                    | type_sums [ COMMA bindings ] COMMA?

bindings ::= binding (COMMA binding)*
binding  ::= IDENTIFIER EQ type

pat_struct_fields ::= (pat_field COMMA)+ DOTDOT
                    | <<comma_separated_list pat_field>>
                    | DOTDOT

private pat_field   ::=     binding_mode?  IDENTIFIER [ COLON pat ]
                      | BOX binding_mode?  IDENTIFIER

binding_mode ::= REF MUT? | MUT

private unsafe_fn_item ::= UNSAFE fn_item

extern_fn_item ::= EXTERN abi? fn_item

decl_item ::= IDENTIFIER COLON type

static_item ::= STATIC MUT? decl_item EQ expr SEMICOLON

const_item ::= CONST decl_item EQ expr SEMICOLON

private view_item ::= use_item
                    | extern_fn_item
                    | extern_crate_decl

use_item ::= USE view_path SEMICOLON { pin = 2 }

abi ::= STRING_LITERAL



///////////////////////////////////////////////////////////////////////////////////////////////////
// Crate
///////////////////////////////////////////////////////////////////////////////////////////////////

extern_crate_decl ::= EXTERN CRATE crate_name SEMICOLON

private crate_name ::= IDENTIFIER | IDENTIFIER AS IDENTIFIER


///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct & Enum
///////////////////////////////////////////////////////////////////////////////////////////////////

mod_item ::= MOD IDENTIFIER (SEMICOLON | LBRACE inner_attrs? mod_contents* RBRACE)

private mod_contents ::= attrs_and_vis item

foreign_mod_item ::= EXTERN abi? LBRACE inner_attrs? foreign_items? RBRACE

private foreign_items ::= foreign_item +

private attrs_and_vis ::= outer_attrs? vis

foreign_item  ::= attrs_and_vis STATIC  foreign_static_item
                | attrs_and_vis UNSAFE? foreign_fn_item

private foreign_static_item ::= MUT? IDENTIFIER COLON type SEMICOLON


///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct
///////////////////////////////////////////////////////////////////////////////////////////////////

struct_item ::= STRUCT IDENTIFIER generic_params (struct_tuple_args? where_clause? SEMICOLON | where_clause? struct_decl_args)

struct_tuple_args ::= LPAREN struct_tuple_fields COMMA? RPAREN

private struct_tuple_fields ::= struct_tuple_field (COMMA struct_tuple_field)*

struct_tuple_field ::= attrs_and_vis type_sum

struct_decl_args ::= LBRACE struct_decl_fields COMMA? RBRACE

private struct_decl_fields ::= [ struct_decl_field (COMMA struct_decl_field)* ]

struct_decl_field ::= attrs_and_vis IDENTIFIER COLON type_sum


///////////////////////////////////////////////////////////////////////////////////////////////////
// Enum
///////////////////////////////////////////////////////////////////////////////////////////////////

enum_item ::= ENUM IDENTIFIER generic_params where_clause? LBRACE enum_defs? COMMA? RBRACE

private enum_defs ::= enum_def (COMMA enum_def)*

enum_def ::= attrs_and_vis IDENTIFIER enum_args?

enum_args ::= LBRACE struct_decl_fields COMMA? RBRACE
            | LPAREN type_sums? RPAREN
            | EQ expr


///////////////////////////////////////////////////////////////////////////////////////////////////
// Trait
///////////////////////////////////////////////////////////////////////////////////////////////////

trait_item ::= UNSAFE? TRAIT IDENTIFIER generic_params for_sized? type_param_bounds? where_clause? LBRACE trait_contents* RBRACE

private for_sized ::= FOR Q IDENTIFIER
                    | FOR IDENTIFIER Q

private trait_contents ::= trait_const | trait_type | trait_method

trait_const ::= outer_attrs? CONST IDENTIFIER type_ascription? const_default? SEMICOLON

type_ascription ::= COLON type_sum

private const_default ::= EQ expr

trait_type ::= outer_attrs? TYPE type_param SEMICOLON

trait_method ::= type_method | method

type_method ::= attrs_and_vis UNSAFE? [ EXTERN abi? ] FN IDENTIFIER generic_params fn_decl_with_self_allow_anon_params where_clause? SEMICOLON

private fn_decl_with_self_allow_anon_params ::= fn_anon_params_with_self ret_type?
private fn_anon_params_with_self ::= LPAREN [ AND lifetime? ] MUT? SELF type_ascription? comma_anon_params? RPAREN
                                   | LPAREN anon_params? RPAREN

private comma_anon_params ::= COMMA [ anon_params COMMA? ]

anon_params ::= anon_param (COMMA anon_param)*

anon_param ::= [ named_arg COLON ] type

private named_arg ::= IDENTIFIER
                    | UNDERSCORE
                    | AND (IDENTIFIER | UNDERSCORE)
                    | ANDAND (IDENTIFIER | UNDERSCORE)
                    | MUT IDENTIFIER

method ::= attrs_and_vis UNSAFE? [ EXTERN abi? ] FN IDENTIFIER generic_params fn_decl_with_self_allow_anon_params where_clause? inner_attrs_and_block


trait_ref ::= path_without_colons


///////////////////////////////////////////////////////////////////////////////////////////////////
// Impl
///////////////////////////////////////////////////////////////////////////////////////////////////

impl_item ::= UNSAFE? IMPL generic_params type_prim_sum                 where_clause? LBRACE inner_attrs? impl_contents* RBRACE
            | UNSAFE? IMPL generic_params LPAREN type RPAREN            where_clause? LBRACE inner_attrs? impl_contents* RBRACE
            | UNSAFE? IMPL generic_params EXCL? trait_ref FOR (type_sum where_clause? LBRACE inner_attrs? impl_contents* RBRACE | DOTDOT LBRACE RBRACE)

private impl_contents ::= impl_method
                        | impl_const
                        | impl_macro
                        | impl_type

impl_method ::= attrs_and_vis UNSAFE? [ EXTERN abi? ] FN IDENTIFIER generic_params fn_decl_with_self where_clause? inner_attrs_and_block

private fn_decl_with_self ::= fn_params_with_self ret_type?

private fn_params_with_self ::= LPAREN [ AND lifetime? ] MUT? SELF type_ascription? comma_params? RPAREN
                              | LPAREN params? RPAREN

private comma_params ::= COMMA [ params COMMA? ]

private impl_const ::= attrs_and_vis const_item

private impl_type ::= attrs_and_vis TYPE IDENTIFIER generic_params EQ type_sum SEMICOLON


///////////////////////////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////////////////////////

private type ::= type_prim
               | LPAREN [ type_sums COMMA? ] RPAREN
               | qual_path_no_types
            /* | LTLT type_sum as_trait_ref? GT COLONCOLON IDENTIFIER as_trait_ref? GT COLONCOLON IDENTIFIER */

type_item ::= TYPE IDENTIFIER generic_params where_clause? EQ type_sum SEMICOLON

// matklad: not sure if we need this production, it is an artifact of
// shift-reduce conflict resolution for impl_item in parser-lalr.y
type_prim_sum ::= type_prim [ PLUS type_param_bound_seq ]

private type_prim ::= path_without_colons
                    | BOX type
                    | MUL    [ MUT | CONST ] type
                    | AND    [ lifetime? MUT? ] type
                    | ANDAND [ lifetime? MUT? ] type
                    | LBRACK type [ (COMMA DOTDOT | SEMICOLON) expr ] RBRACK
                    | TYPEOF LPAREN expr RPAREN
                    | UNDERSCORE
                    | type_bare_fn
                    | for_in_type

private type_bare_fn ::= [ UNSAFE? [ EXTERN abi? ] ] FN type_fn_decl

private type_fn_decl ::= generic_params fn_anon_params ret_type?

private fn_anon_params ::= LPAREN anon_param anon_params_allow_variadic_tail RPAREN
                         | LPAREN RPAREN

private anon_params_allow_variadic_tail ::= [ COMMA (DOTDOTDOT | anon_param anon_params_allow_variadic_tail) ]


private for_in_type ::= FOR LT lifetimes? GT for_in_type_suffix
private for_in_type_suffix ::= type_bare_fn
                             | trait_ref


///////////////////////////////////////////////////////////////////////////////////////////////////
// Paths
///////////////////////////////////////////////////////////////////////////////////////////////////

// Paths used in expression contexts.
// Examples;
// - a::b::<T,U>::c
path_with_colons ::= COLONCOLON? <<coloncolon_separated_list path_with_colons_segment>>

path_with_colons_segment ::= ident_or_self_type COLONCOLON LT generic_values GT
                           | ident_or_self_type


// In rustc parser, self/super are treated as identifiers only if immediately followed by `::`
// Thus, these are valid paths,
//  - foo :: bar ::baz
//  - self:: super::foo ::baz
// and these are invalid
//  - self ::foo::bar
//  - self::super ::foo
//
// We parse all the above paths as valid.
private ident_or_self_type ::= IDENTIFIER | SELF | SUPER | CSELF


// Paths used in type contexts.
// Examples:
// - `a::b<T,U>::c<V,W>`
// - `a::b<T,U>::c(V) -> W`
// - `a::b<T,U>::c(V)`
path_without_colons ::= COLONCOLON? <<coloncolon_separated_list path_without_colons_segment>>
private path_without_colons_segment ::= ident_or_self_type [LT generic_values GT
                                                   | LPAREN type_sums? RPAREN ret_type?]


private qual_path_start ::= LT type_sum [AS path_without_colons] GT COLONCOLON

qual_path_with_colons ::= qual_path_start <<coloncolon_separated_list path_with_colons_segment>>
qual_path_no_types ::= qual_path_start <<coloncolon_separated_list path_no_types_segment>>

private path_no_types_segment ::= ident_or_self_type


// Paths used in use items.
// Examples:
// - foo::bar::{self, foo}
// - {foo, bar}
// - ::foo::*
// - foo::bar as baz
view_path ::= path_no_types_allowed? COLONCOLON LBRACE [ idents_or_self COMMA? ] RBRACE
            | path_no_types_allowed  COLONCOLON MUL
            |                                   LBRACE [ idents_or_self COMMA? ] RBRACE
            | path_no_types_allowed [AS IDENTIFIER]

private idents_or_self ::= (IDENTIFIER | SELF) [ AS IDENTIFIER ] (COMMA idents_or_self)*

private path_no_types_allowed ::= view_path_part_leftish view_path_part*

view_path_part_leftish ::= COLONCOLON? (SELF | SUPER | IDENTIFIER) {
    extends = view_path_part
}

left view_path_part ::= COLONCOLON IDENTIFIER


//
// Expressions
//

expr ::= ret_expr
       | assign_bin_expr
       | block_expr
       | cont_expr
       | break_expr
       | lambda_expr
       | full_range_expr
       | open_range_expr
       | bool_or_bin_expr
       | bool_and_bin_expr
       | bit_or_bin_expr
       | bit_xor_bin_expr
       | bit_and_bin_expr
       | comp_bin_expr
       | rel_comp_bin_expr
       | bit_shift_bin_expr
       | add_bin_expr
       | mul_bin_expr
       | cast_expr
       | atom_expr

block_expr ::= while_expr
             | while_let_expr
             | if_expr
             | if_let_expr
             | for_expr
             | loop_expr
             | match_expr
             | (UNSAFE &LBRACE)? block


private atom_expr ::= lit_expr
                    | macro_expr
                    | struct_expr
                    | path_expr
                    | qual_path_expr
                    | self_expr
                    | method_call_expr
                    | field_expr
                    | index_expr
                    | call_expr
                    | array_expr
                    | tuple_expr
                    | unit_expr
                    | paren_expr
                    | unary_expr

self_expr ::= SELF


binary_expr ::= expr + {
    methods=[
        left="/expr[0]"
        right="/expr[1]"
    ]
}

assign_bin_expr ::= expr
                  ( GTGTEQ
                  | LTLTEQ
                  | OREQ
                  | XOREQ
                  | ANDEQ
                  | EQ
                  | PLUSEQ
                  | MINUSEQ
                  | MULEQ
                  | DIVEQ
                  | REMEQ
                  ) expr    { rightAssociative = true }

comp_bin_expr       ::= expr (EQEQ | EXCLEQ) expr
rel_comp_bin_expr   ::= expr (LT !(LT | EQ) | GT !(GT | EQ) | LTEQ | GTEQ) expr
bit_shift_bin_expr  ::= expr (LTLT | GTGT) expr
add_bin_expr        ::= expr (PLUS | MINUS) expr
mul_bin_expr        ::= expr (MUL | DIV | REM) expr

bool_or_bin_expr    ::= expr OROR expr
bool_and_bin_expr   ::= expr ANDAND expr
bit_or_bin_expr     ::= expr OR expr
bit_xor_bin_expr    ::= expr XOR expr
bit_and_bin_expr    ::= expr AND expr


cast_expr ::= expr AS type

unary_expr ::= (MINUS | MUL | EXCL | (AND | ANDAND) MUT?) expr

lambda_expr ::= MOVE? (OROR | OR [<<comma_separated_list lambda_param>>] OR) ret_type? expr
private lambda_param ::= pat type_ascription?

struct_expr ::= path_with_colons struct_expr_body

struct_expr_body ::= LBRACE
                       <<comma_separated_list (IDENTIFIER COLON expr)>>
                       (DOTDOT  expr)?
                     RBRACE
// matklad: this are ambiguous with path_expr and call_expr
//                 | path_expr LPAREN expr
//                         (COMMA  expr)* RPAREN
//                 | path_expr

path_expr ::= path_with_colons

qual_path_expr ::= qual_path_with_colons

while_expr ::= [lifetime COLON] WHILE no_struct_lit_expr block

loop_expr ::= [lifetime COLON] LOOP block
cont_expr ::= CONTINUE lifetime?

break_expr ::= BREAK lifetime?

for_expr ::= [lifetime COLON] FOR pat IN no_struct_lit_expr block



match_expr ::= MATCH no_struct_lit_expr LBRACE match_arm* RBRACE

private match_arm ::= outer_attrs* match_pat FAT_ARROW (expr (COMMA | & RBRACE) | block )
private match_pat ::= pat (OR pat)* (IF expr)?

if_expr ::= IF no_struct_lit_expr block else_tail?

private else_tail ::= ELSE (if_expr | if_let_expr | block )

if_let_expr ::= IF LET pat EQ expr block  else_tail?

while_let_expr ::= WHILE LET pat EQ expr block

ret_expr ::= RETURN expr?

paren_expr ::= (LPAREN expr RPAREN)

unit_expr ::= LPAREN RPAREN

tuple_expr ::= LPAREN expr ((COMMA expr)+ | COMMA) RPAREN

// https://github.com/rust-lang/rfcs/blob/master/text/0092-struct-grammar.md
private no_struct_lit_expr ::= expr

array_expr ::= LBRACK array_elems? RBRACK {pin=1}

private array_elems ::= expr SEMICOLON expr
                      | expr_list


//private range_expr_group ::= open_range_expr
//                           | full_range_expr

full_range_expr ::= expr DOTDOT expr?
open_range_expr ::=      DOTDOT expr?

range_expr ::= expr + {
    methods=[
        from="/expr[0]"
        to="/expr[1]"
    ]
}


index_expr ::= expr index_arg

private index_arg ::= LBRACK expr RBRACK

call_expr ::= expr arg_list

method_call_expr ::= expr DOT IDENTIFIER [COLONCOLON generic_args] arg_list { pin=2 }

arg_list ::= LPAREN expr_list? RPAREN {pin=1}

private expr_list ::= <<comma_separated_list expr>>

field_expr ::= expr DOT (IDENTIFIER | INTEGER_LITERAL) { pin(".*")=2 }

lit_expr ::= lit

///////////////////////////////////////////////////////////////////////////////////////////////////
// Macros
///////////////////////////////////////////////////////////////////////////////////////////////////


macro_expr ::= IDENTIFIER EXCL macro_arg

pat_macro  ::= IDENTIFIER EXCL macro_arg

macro_arg ::= LPAREN expr_list? RPAREN
            | LBRACE expr_list? RBRACE
            | LBRACK expr_list? RBRACK
            | LPAREN token_tree RPAREN
            | LBRACE token_tree RBRACE
            | LBRACK token_tree RBRACK {pin=1}

// This "parses" both macro definitons and macro usage
item_macro ::= IDENTIFIER EXCL IDENTIFIER?
             ( LPAREN token_tree? RPAREN SEMICOLON
             | LBRACE token_tree? RBRACE
             | LBRACK token_tree? RBRACK SEMICOLON )

impl_macro ::= IDENTIFIER EXCL IDENTIFIER?
             ( LPAREN token_tree? RPAREN SEMICOLON
             | LBRACE token_tree? RBRACE
             | LBRACK token_tree? RBRACK SEMICOLON )

token_tree ::= LPAREN token_tree* RPAREN token_tree*
             | LBRACE token_tree* RBRACE token_tree*
             | LBRACK token_tree* RBRACK token_tree*
             | << unpairedToken >> + token_tree*


///////////////////////////////////////////////////////////////////////////////////////////////////
// Literals
///////////////////////////////////////////////////////////////////////////////////////////////////

private lit ::= ( STRING_LITERAL
                | CHAR_LITERAL
                | BYTE_STRING_LITERAL
                | BYTE_LITERAL
                | INTEGER_LITERAL
                | FLOAT_LITERAL
                | bool_lit ) lit_suffix?

private bool_lit ::= FALSE | TRUE

private lit_suffix ::= IDENTIFIER


///////////////////////////////////////////////////////////////////////////////////////////////////
// Lifetimes
///////////////////////////////////////////////////////////////////////////////////////////////////

private lifetime ::= LIFETIME | STATIC_LIFETIME


///////////////////////////////////////////////////////////////////////////////////////////////////
// Declarations
///////////////////////////////////////////////////////////////////////////////////////////////////

let_decl ::= LET pat [ COLON type ] [ EQ expr ] SEMICOLON


///////////////////////////////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////////////////////////////

block ::= LBRACE stmt* expr? RBRACE {pin(".*")=1}
inner_attrs_and_block ::= LBRACE inner_attrs? stmt* expr? RBRACE {pin(".*")=1}


expr_stmt ::= expr SEMICOLON
decl_stmt ::= (item | let_decl)

stmt ::= block_expr
       | expr_stmt
       | decl_stmt
       | SEMICOLON

///////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
///////////////////////////////////////////////////////////////////////////////////////////////////

GTGTEQ ::= GT GT EQ
GTGT   ::= GT GT
GTEQ   ::= GT EQ

LTLTEQ ::= LT LT EQ
LTLT   ::= LT LT
LTEQ   ::= LT EQ

// trailing commas are allowed
private meta comma_separated_list ::= <<param>> ( ',' <<param>> ) * [',']

// trailing `::` is not allowed
private meta coloncolon_separated_list ::= <<param>> (COLONCOLON <<param>>)*
