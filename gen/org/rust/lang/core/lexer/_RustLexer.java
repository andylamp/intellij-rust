/* The following code was generated by JFlex 1.6.0 */

package org.rust.lang.core.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/org/rust/lang/core/lexer/RustLexer.flex</tt>
 */
public class _RustLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int EOL_COMMENT = 4;
  public static final int LIFETIME_OR_CHAR = 6;
  public static final int RAW_LITERAL = 8;
  public static final int SUFFIX = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\46\1\46\1\1\22\0\1\2\1\44\1\34"+
    "\1\43\1\0\1\67\1\62\1\50\1\52\1\53\1\65\1\60\1\56"+
    "\1\7\1\5\1\66\1\16\1\24\1\12\1\11\1\14\1\33\1\13"+
    "\1\33\1\23\1\31\1\54\1\55\1\63\1\57\1\70\1\71\1\72"+
    "\4\32\1\6\1\32\14\3\1\105\7\3\1\45\1\35\1\51\1\64"+
    "\1\15\1\0\1\73\1\21\1\74\1\101\1\30\1\10\1\76\1\103"+
    "\1\26\1\3\1\100\1\75\1\77\1\36\1\20\1\102\1\3\1\37"+
    "\1\25\1\40\1\22\1\104\1\107\1\17\1\106\1\27\1\41\1\61"+
    "\1\42\2\0\5\110\1\47\44\110\1\111\12\110\1\111\1\110\1\112"+
    "\2\110\1\111\5\110\27\111\1\110\37\111\1\110\10\111\u01c2\3\4\0"+
    "\14\3\16\0\5\3\7\0\1\3\1\0\1\3\21\0\160\4\5\3"+
    "\1\0\2\3\3\0\3\3\1\0\1\3\6\0\1\3\1\4\3\3"+
    "\1\0\1\3\1\0\24\3\1\0\123\3\1\0\213\3\1\0\5\4"+
    "\2\0\246\3\1\0\46\3\2\0\1\3\7\0\47\3\11\0\55\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4\10\0\33\3"+
    "\5\0\3\3\35\0\13\4\5\0\53\3\37\4\4\0\2\3\1\4"+
    "\143\3\1\0\1\3\7\4\2\0\6\4\2\3\2\4\1\0\4\4"+
    "\2\3\12\4\3\3\2\0\1\3\20\0\1\3\1\4\36\3\33\4"+
    "\2\0\131\3\13\4\1\3\16\0\12\4\41\3\11\4\2\3\4\0"+
    "\1\3\5\0\26\3\4\4\1\3\11\4\1\3\3\4\1\3\5\4"+
    "\22\0\31\3\3\4\104\0\23\3\61\0\40\4\66\3\3\4\1\3"+
    "\22\4\1\3\7\4\12\3\2\4\2\0\12\4\1\0\20\3\3\4"+
    "\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\1\3"+
    "\3\0\4\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0\3\4"+
    "\1\3\10\0\1\4\4\0\2\3\1\0\3\3\2\4\2\0\12\4"+
    "\2\3\17\0\3\4\1\0\6\3\4\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0"+
    "\5\4\4\0\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0"+
    "\1\3\7\0\14\4\3\3\1\4\13\0\3\4\1\0\11\3\1\0"+
    "\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0"+
    "\1\4\1\3\10\4\1\0\3\4\1\0\3\4\2\0\1\3\17\0"+
    "\2\3\2\4\2\0\12\4\21\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3"+
    "\1\0\3\3\2\4\2\0\12\4\1\0\1\3\20\0\1\4\1\3"+
    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3"+
    "\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\4"+
    "\3\0\3\4\1\0\4\4\2\0\1\3\6\0\1\4\16\0\12\4"+
    "\20\0\4\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\20\3"+
    "\3\0\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\1\0"+
    "\2\3\6\0\2\3\2\4\2\0\12\4\21\0\3\4\1\0\10\3"+
    "\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\3"+
    "\1\0\2\3\2\4\2\0\12\4\1\0\2\3\16\0\3\4\1\0"+
    "\10\3\1\0\3\3\1\0\51\3\2\0\1\3\7\4\1\0\3\4"+
    "\1\0\4\4\1\3\10\0\1\4\10\0\2\3\2\4\2\0\12\4"+
    "\12\0\6\3\2\0\2\4\1\0\22\3\3\0\30\3\1\0\11\3"+
    "\1\0\1\3\2\0\7\3\3\0\1\4\4\0\6\4\1\0\1\4"+
    "\1\0\10\4\6\0\12\4\2\0\2\4\15\0\60\3\1\4\1\3"+
    "\10\4\5\0\7\3\10\4\1\0\12\4\47\0\2\3\1\0\1\3"+
    "\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3"+
    "\1\4\1\3\7\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3"+
    "\1\0\6\4\2\0\12\4\2\0\4\3\40\0\1\3\27\0\2\4"+
    "\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\10\3\1\0\44\3\4\0\24\4\1\0\2\4\5\3\13\4\1\0"+
    "\44\4\11\0\1\4\71\0\53\3\24\4\1\3\12\4\6\0\6\3"+
    "\4\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3\4\4\15\3"+
    "\14\4\1\3\17\4\2\0\46\3\1\0\1\3\5\0\1\3\2\0"+
    "\53\3\1\0\u014d\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0"+
    "\4\3\2\0\103\3\2\0\3\4\11\0\11\4\16\0\20\3\20\0"+
    "\125\3\14\0\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\3\0"+
    "\13\3\7\0\15\3\1\0\4\3\3\4\13\0\22\3\3\4\13\0"+
    "\22\3\2\4\14\0\15\3\1\0\3\3\1\0\2\4\14\0\64\3"+
    "\40\4\3\0\1\3\4\0\1\3\1\4\2\0\12\4\41\0\3\4"+
    "\2\0\12\4\6\0\130\3\10\0\51\3\1\4\1\3\5\0\106\3"+
    "\12\0\37\3\1\0\14\4\4\0\14\4\12\0\12\4\36\3\2\0"+
    "\5\3\13\0\54\3\4\0\21\4\7\3\2\4\6\0\13\4\45\0"+
    "\27\3\5\4\4\0\65\3\12\4\1\0\35\4\2\0\13\4\6\0"+
    "\12\4\15\0\1\3\10\0\16\4\102\0\5\4\57\3\21\4\7\3"+
    "\4\0\12\4\21\0\11\4\14\0\3\4\36\3\15\4\2\3\12\4"+
    "\54\3\16\4\14\0\44\3\24\4\10\0\12\4\3\0\3\3\12\4"+
    "\44\3\122\0\3\4\1\0\25\4\4\3\1\4\4\3\3\4\2\3"+
    "\1\0\2\4\6\0\300\3\66\4\6\0\4\4\u0116\3\2\0\6\3"+
    "\2\0\46\3\2\0\6\3\2\0\10\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\37\3\2\0\65\3\1\0\7\3\1\0\1\3"+
    "\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\15\3"+
    "\5\0\3\3\1\0\7\3\53\0\1\46\1\46\25\0\2\4\23\0"+
    "\1\4\34\0\1\3\15\0\1\3\20\0\15\3\63\0\15\4\4\0"+
    "\1\4\3\0\14\4\21\0\1\3\4\0\1\3\2\0\12\3\1\0"+
    "\1\3\2\0\6\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\20\3\2\0\4\3\5\0\5\3\4\0\1\3\21\0\51\3\u0a77\0"+
    "\57\3\1\0\57\3\1\0\205\3\6\0\4\3\3\4\2\3\14\0"+
    "\46\3\1\0\1\3\5\0\1\3\2\0\70\3\7\0\1\3\17\0"+
    "\1\4\27\3\11\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\40\4"+
    "\u0205\0\3\3\31\0\11\3\6\4\1\0\5\3\2\0\5\3\4\0"+
    "\126\3\2\0\2\4\2\0\3\3\1\0\132\3\1\0\4\3\5\0"+
    "\51\3\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0"+
    "\u51cd\3\63\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0\20\3\12\4"+
    "\2\3\24\0\57\3\1\4\4\0\12\4\1\0\37\3\1\0\1\4"+
    "\120\3\2\4\45\0\11\3\2\0\147\3\2\0\4\3\1\0\36\3"+
    "\2\0\2\3\105\0\13\3\1\4\3\3\1\4\4\3\1\4\27\3"+
    "\5\4\30\0\64\3\14\0\2\4\62\3\21\4\13\0\12\4\6\0"+
    "\22\4\6\3\3\0\1\3\4\0\12\4\34\3\10\4\2\0\27\3"+
    "\15\4\14\0\35\3\3\0\4\4\57\3\16\4\16\0\1\3\12\4"+
    "\6\0\5\3\1\4\12\3\12\4\5\3\1\0\51\3\16\4\11\0"+
    "\3\3\1\4\10\3\2\4\2\0\12\4\6\0\27\3\3\0\1\3"+
    "\3\4\62\3\1\4\1\3\3\4\2\3\2\4\5\3\2\4\1\3"+
    "\1\4\1\3\30\0\3\3\2\0\13\3\5\4\2\0\3\3\2\4"+
    "\12\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3"+
    "\1\0\53\3\1\0\4\3\4\0\2\3\132\0\43\3\10\4\1\0"+
    "\2\4\2\0\12\4\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0"+
    "\u016e\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0\1\3\1\4"+
    "\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\154\3\41\0\213\3\6\0\332\3\22\0\100\3\2\0"+
    "\66\3\50\0\12\3\6\0\20\4\20\0\16\4\5\0\2\4\30\0"+
    "\3\4\41\0\1\3\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\176\3\23\0\12\4\7\0\32\3\4\0"+
    "\1\4\1\0\32\3\13\0\70\3\2\4\37\3\3\0\6\3\2\0"+
    "\6\3\2\0\6\3\2\0\3\3\43\0\14\3\1\0\32\3\1\0"+
    "\23\3\1\0\2\3\1\0\17\3\2\0\16\3\42\0\173\3\105\0"+
    "\65\3\210\0\1\4\202\0\35\3\3\0\61\3\17\0\1\4\37\0"+
    "\40\3\20\0\33\3\5\0\46\3\5\4\5\0\36\3\2\0\44\3"+
    "\4\0\10\3\1\0\5\3\52\0\236\3\2\0\12\4\126\0\50\3"+
    "\10\0\64\3\234\0\u0137\3\11\0\26\3\12\0\10\3\230\0\6\3"+
    "\2\0\1\3\1\0\54\3\1\0\2\3\3\0\1\3\2\0\27\3"+
    "\12\0\27\3\11\0\37\3\141\0\26\3\12\0\32\3\106\0\70\3"+
    "\6\0\2\3\100\0\1\3\3\4\1\0\2\4\5\0\4\4\4\3"+
    "\1\0\3\3\1\0\33\3\4\0\3\4\4\0\1\4\40\0\35\3"+
    "\3\0\35\3\43\0\10\3\1\0\34\3\2\4\31\0\66\3\12\0"+
    "\26\3\12\0\23\3\15\0\22\3\156\0\111\3\u03b7\0\3\4\65\3"+
    "\17\4\37\0\12\4\17\0\4\4\55\3\13\4\25\0\31\3\7\0"+
    "\12\4\6\0\3\4\44\3\16\4\1\0\12\4\20\0\43\3\1\4"+
    "\2\0\1\3\11\0\3\4\60\3\16\4\4\3\13\0\12\4\1\3"+
    "\45\0\22\3\1\0\31\3\14\4\170\0\57\3\14\4\5\0\12\4"+
    "\7\0\3\4\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3"+
    "\1\0\2\3\1\0\5\3\2\0\1\4\1\3\7\4\2\0\2\4"+
    "\2\0\3\4\11\0\1\4\5\0\5\3\2\4\2\0\7\4\3\0"+
    "\5\4\u010b\0\60\3\24\4\2\3\1\0\1\3\10\0\12\4\246\0"+
    "\57\3\7\4\2\0\11\4\77\0\60\3\21\4\3\0\1\3\13\0"+
    "\12\4\46\0\53\3\15\4\10\0\12\4\u01d6\0\100\3\12\4\25\0"+
    "\1\3\u01c0\0\71\3\u0507\0\u0399\3\147\0\157\3\u0b91\0\u042f\3\u33d1\0"+
    "\u0239\3\7\0\37\3\1\0\12\4\146\0\36\3\2\0\5\4\13\0"+
    "\60\3\7\4\11\0\4\3\14\0\12\4\11\0\25\3\5\0\23\3"+
    "\u0370\0\105\3\13\0\1\3\56\4\20\0\4\4\15\3\u4060\0\2\3"+
    "\u0bfe\0\153\3\5\0\15\3\3\0\11\3\7\0\12\3\3\0\2\4"+
    "\u14c6\0\5\4\3\0\6\4\10\0\10\4\2\0\7\4\36\0\4\4"+
    "\224\0\3\4\u01bb\0\125\3\1\0\107\3\1\0\2\3\2\0\1\3"+
    "\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0\7\3"+
    "\1\0\101\3\1\0\4\3\2\0\10\3\1\0\7\3\1\0\34\3"+
    "\1\0\4\3\1\0\5\3\1\0\1\3\3\0\7\3\1\0\u0154\3"+
    "\2\0\31\3\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3"+
    "\1\0\31\3\1\0\37\3\1\0\31\3\1\0\37\3\1\0\31\3"+
    "\1\0\10\3\2\0\62\4\u1000\0\305\3\13\0\7\4\u0529\0\4\3"+
    "\1\0\33\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3"+
    "\1\0\4\3\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3"+
    "\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3"+
    "\1\0\4\3\1\0\1\3\1\0\12\3\1\0\21\3\5\0\3\3"+
    "\1\0\5\3\1\0\21\3\u1144\0\ua6d7\3\51\0\u1035\3\13\0\336\3"+
    "\u3fe2\0\u021e\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\4\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\5\1\10\1\11\1\10\6\5\1\12\2\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\12\5\2\0\2\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\5\1\52\1\5\4\0\3\10\4\5\1\53"+
    "\7\5\1\54\1\55\4\5\2\12\1\5\1\56\1\0"+
    "\2\5\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\5\1\102\10\5\1\103"+
    "\6\5\1\1\1\0\2\104\3\0\1\104\1\105\1\106"+
    "\1\107\2\5\1\110\1\111\1\0\1\111\4\0\1\10"+
    "\2\0\2\5\1\112\1\5\2\53\1\5\1\113\1\0"+
    "\1\114\12\5\1\115\1\5\2\56\1\116\3\5\1\117"+
    "\1\120\5\5\1\121\1\122\1\5\1\123\2\5\1\124"+
    "\10\5\1\125\2\104\2\0\1\125\1\0\1\104\2\5"+
    "\1\111\1\0\4\5\2\113\1\126\4\5\1\127\2\5"+
    "\1\130\1\5\1\131\1\132\1\5\1\133\1\5\1\134"+
    "\5\5\1\135\1\136\2\5\1\137\1\140\1\141\1\5"+
    "\1\142\3\5\1\104\3\0\1\104\1\143\1\144\1\0"+
    "\3\5\1\145\2\5\1\146\5\5\1\147\3\5\1\150"+
    "\1\5\1\151\1\152\1\153\1\5\1\154\1\155\1\156"+
    "\1\104\1\0\2\5\1\157\1\5\1\160\1\161\1\162"+
    "\1\163\1\164\1\165\1\166\4\5\1\104\1\0\2\5"+
    "\1\167\1\5\1\170\1\5\1\171\1\172\1\0\1\173"+
    "\1\174\1\175\1\176\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u0258\0\u03cf\0\u041a"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u01c2\0\u01c2\0\u06bd\0\u0708\0\u01c2\0\u01c2\0\u01c2\0\u01c2"+
    "\0\u01c2\0\u0753\0\u01c2\0\u01c2\0\u079e\0\u07e9\0\u0834\0\u087f"+
    "\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u01c2\0\u01c2\0\u01c2"+
    "\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e"+
    "\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u01c2\0\u0dc5\0\u01c2\0\u0e10"+
    "\0\u0e5b\0\u01c2\0\u01c2\0\u01c2\0\u0ea6\0\u0ef1\0\u0258\0\u0f3c"+
    "\0\u0f87\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194"+
    "\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec"+
    "\0\u1437\0\u1482\0\u14cd\0\u0258\0\u0258\0\u1518\0\u1563\0\u15ae"+
    "\0\u15f9\0\u01c2\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770\0\u17bb"+
    "\0\u1806\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u1851\0\u01c2\0\u01c2\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u01c2\0\u189c\0\u0258\0\u18e7\0\u1932\0\u197d"+
    "\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u0258\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u01c2\0\u1d01\0\u1d4c\0\u1d97"+
    "\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u0dc5\0\u01c2\0\u0258\0\u1f0e"+
    "\0\u1f59\0\u01c2\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b"+
    "\0\u2166\0\u01c2\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u0258\0\u22dd"+
    "\0\u01c2\0\u2328\0\u2373\0\u23be\0\u2409\0\u0258\0\u2454\0\u249f"+
    "\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7"+
    "\0\u0258\0\u2742\0\u01c2\0\u278d\0\u01c2\0\u27d8\0\u2823\0\u286e"+
    "\0\u28b9\0\u01c2\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u0258"+
    "\0\u0258\0\u2a7b\0\u0258\0\u2ac6\0\u2b11\0\u0258\0\u2b5c\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u01c2\0\u2db4"+
    "\0\u2dff\0\u2e4a\0\u2e95\0\u1d01\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1"+
    "\0\u01c2\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u01c2\0\u3183"+
    "\0\u01c2\0\u31ce\0\u3219\0\u3264\0\u32af\0\u0258\0\u32fa\0\u3345"+
    "\0\u0258\0\u3390\0\u0258\0\u0258\0\u33db\0\u0258\0\u3426\0\u3471"+
    "\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8\0\u0258\0\u0258\0\u3633"+
    "\0\u367e\0\u0258\0\u0258\0\u0258\0\u36c9\0\u0258\0\u3714\0\u375f"+
    "\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921\0\u0258\0\u0258"+
    "\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u0258\0\u3a98\0\u3ae3\0\u0258"+
    "\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u3c5a\0\u0258\0\u3ca5\0\u3cf0"+
    "\0\u3d3b\0\u0258\0\u3d86\0\u0258\0\u0258\0\u0258\0\u3dd1\0\u0258"+
    "\0\u0258\0\u0258\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u0258\0\u3f48"+
    "\0\u0258\0\u0258\0\u0258\0\u0258\0\u0258\0\u0258\0\u0258\0\u3f93"+
    "\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u0258"+
    "\0\u41eb\0\u0258\0\u4236\0\u0258\0\u2db4\0\u4281\0\u0258\0\u0258"+
    "\0\u0258\0\u0258\0\u42cc\0\u4317\0\u4362";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\7\1\12\1\11\1\13\1\14"+
    "\4\15\1\16\1\17\1\11\1\20\1\21\1\22\2\15"+
    "\1\23\1\24\1\11\1\25\1\15\1\11\1\15\1\26"+
    "\1\7\1\11\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\7\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\11\1\64\1\11\1\65\1\66\1\11\1\67\1\70"+
    "\1\71\1\72\1\7\1\11\1\7\65\2\1\73\25\2"+
    "\1\3\1\0\44\3\2\0\43\3\50\0\1\74\42\0"+
    "\34\75\1\76\56\75\3\77\1\100\2\77\1\100\1\77"+
    "\1\100\4\77\1\100\1\77\4\100\2\77\4\100\1\77"+
    "\1\100\3\77\3\100\32\77\15\100\1\77\1\100\1\77"+
    "\114\0\2\10\113\0\2\11\1\0\1\11\1\0\24\11"+
    "\2\0\3\11\32\0\15\11\1\0\2\11\5\0\1\101"+
    "\114\0\1\102\47\0\1\103\10\0\1\104\25\0\2\11"+
    "\1\0\1\11\1\0\10\11\1\105\5\11\1\106\5\11"+
    "\2\0\1\107\2\11\32\0\1\110\14\11\1\0\2\11"+
    "\5\0\1\111\1\112\1\0\1\113\6\15\3\0\1\114"+
    "\2\15\1\0\1\114\1\0\1\112\1\15\1\0\1\15"+
    "\64\0\1\111\1\112\1\0\1\113\6\15\1\115\1\116"+
    "\1\117\1\114\2\15\1\0\1\114\1\0\1\112\1\15"+
    "\1\0\1\15\62\0\2\11\1\0\1\11\1\0\1\120"+
    "\23\11\2\0\3\11\32\0\11\11\1\121\3\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\10\11\1\122"+
    "\7\11\1\123\3\11\1\124\1\0\1\11\1\125\1\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\15\11\1\126\6\11\2\0\1\127\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\12\11\1\130\3\11\1\131\1\11\1\132\3\11\2\0"+
    "\2\11\1\133\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\1\134\23\11\2\0\1\135\2\11"+
    "\32\0\4\11\1\136\10\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\7\11\1\137\14\11\2\0\1\140"+
    "\2\11\32\0\2\11\1\141\12\11\1\0\2\11\34\26"+
    "\1\142\1\143\55\26\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\144\3\11\1\145\1\0\3\11\2\0\1\146"+
    "\27\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\1\11\1\147\1\11\32\0\13\11"+
    "\1\150\1\11\1\0\2\11\44\0\1\151\125\0\1\152"+
    "\107\0\1\153\115\0\1\154\10\0\1\155\101\0\1\156"+
    "\1\157\111\0\1\160\1\0\1\161\110\0\1\162\2\0"+
    "\1\163\107\0\1\164\3\0\1\165\106\0\1\166\112\0"+
    "\1\167\112\0\1\170\5\0\1\171\1\172\103\0\1\173"+
    "\36\0\2\11\1\0\1\11\1\0\11\11\1\174\3\11"+
    "\1\175\6\11\2\0\3\11\32\0\2\11\1\176\12\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\10\11"+
    "\1\177\13\11\2\0\1\11\1\200\1\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\10\11"+
    "\1\201\7\11\1\202\3\11\2\0\3\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\10\11"+
    "\1\203\1\11\1\204\11\11\2\0\3\11\32\0\1\205"+
    "\14\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\10\11\1\206\13\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\12\11\1\207"+
    "\11\11\2\0\1\11\1\210\1\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\16\11\1\211"+
    "\5\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\212\3\11\2\0"+
    "\3\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\16\11\1\213\5\11\2\0\3\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\3\11\32\0\10\11\1\214\4\11\1\0"+
    "\2\11\65\2\1\73\1\215\24\2\1\216\1\0\1\216"+
    "\1\217\2\216\1\217\1\216\1\217\4\216\1\217\1\216"+
    "\4\217\2\216\1\220\3\217\1\216\1\217\2\216\1\221"+
    "\3\217\5\216\1\0\1\222\23\216\15\217\1\223\1\224"+
    "\1\223\43\0\1\225\52\0\2\100\1\0\1\100\1\0"+
    "\24\100\2\0\3\100\32\0\15\100\1\0\2\100\5\0"+
    "\1\226\110\0\2\11\1\0\1\11\1\0\24\11\2\0"+
    "\1\11\1\227\1\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\1\230\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\3\11\32\0\2\11\1\231\12\11"+
    "\1\0\2\11\3\232\1\0\1\232\2\0\1\232\1\0"+
    "\4\233\1\0\1\233\4\0\2\233\4\0\1\233\1\0"+
    "\1\233\2\232\3\0\32\232\15\0\1\232\1\0\1\232"+
    "\7\0\1\234\1\0\4\235\1\0\1\235\4\0\2\235"+
    "\4\0\1\235\1\0\1\235\24\0\1\234\43\0\1\236"+
    "\1\0\1\237\110\0\1\240\1\0\1\241\7\0\1\242"+
    "\1\243\1\244\73\0\1\115\2\0\6\115\3\0\1\114"+
    "\2\115\1\0\1\114\2\0\3\115\70\0\6\116\3\0"+
    "\1\114\1\0\1\116\1\0\1\114\4\0\1\116\74\0"+
    "\2\117\3\0\1\114\1\0\1\117\1\0\1\114\67\0"+
    "\2\11\1\0\1\11\1\0\1\245\23\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\20\11\1\246\3\11\2\0\3\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\7\11"+
    "\1\247\14\11\2\0\3\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\3\11"+
    "\32\0\1\11\1\250\13\11\1\0\2\11\34\124\1\251"+
    "\1\252\55\124\3\0\2\11\1\0\1\11\1\0\20\11"+
    "\1\253\3\11\1\254\1\0\3\11\2\0\1\255\27\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\256\3\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\15\11\1\257"+
    "\6\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\7\11\1\260\5\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\17\11\1\261\4\11\2\0\3\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\3\11\32\0\2\11\1\262\12\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\2\0"+
    "\1\11\1\263\1\11\32\0\1\264\14\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\3\11"+
    "\32\0\7\11\1\265\5\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\2\0\2\11\1\266\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\12\11\1\267\11\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\15\11\1\270"+
    "\6\11\2\0\3\11\32\0\15\11\1\0\2\11\35\26"+
    "\1\143\55\26\3\0\2\11\1\0\1\11\1\0\1\271"+
    "\23\11\2\0\2\11\1\272\32\0\15\11\1\0\2\11"+
    "\34\145\1\273\1\274\55\145\34\0\1\275\6\0\1\146"+
    "\52\0\2\11\1\0\1\11\1\0\12\11\1\276\11\11"+
    "\2\0\3\11\32\0\1\277\14\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\7\11\1\300\5\11\1\0\2\11\45\301\1\0\45\301"+
    "\57\0\1\302\36\0\2\11\1\0\1\11\1\0\15\11"+
    "\1\303\6\11\2\0\3\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\16\11\1\304\5\11"+
    "\2\0\3\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\2\0\1\305\2\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\3\11\32\0\1\306\14\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\10\11\1\307\13\11"+
    "\2\0\3\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\2\0\2\11\1\310\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\3\11\32\0\6\11\1\311\2\11\1\312"+
    "\3\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\2\11\1\313\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\2\11"+
    "\1\314\32\0\1\11\1\315\13\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\11\11\1\316\12\11\2\0"+
    "\1\11\1\317\1\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\10\11\1\320\5\11\1\321"+
    "\5\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\1\11\1\322"+
    "\1\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\3\11\32\0\2\11\1\323"+
    "\12\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\324\3\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\16\11\1\325"+
    "\1\11\1\326\3\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\50\0\1\327\45\0\2\330\1\0\1\330\1\0"+
    "\24\330\2\0\3\330\7\0\1\327\22\0\15\330\1\0"+
    "\2\330\3\0\2\330\1\0\1\330\1\0\24\330\2\0"+
    "\2\330\1\331\7\0\1\327\22\0\15\330\1\0\2\330"+
    "\16\0\1\216\1\332\2\0\1\333\11\0\5\216\7\0"+
    "\1\334\111\0\1\335\40\0\3\335\47\0\1\335\1\327"+
    "\37\0\3\335\3\0\2\330\1\0\1\330\1\0\24\330"+
    "\2\0\3\330\6\0\1\335\1\327\22\0\15\330\1\335"+
    "\2\336\3\0\2\11\1\0\1\11\1\0\24\11\2\0"+
    "\3\11\32\0\1\337\14\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\15\11\1\340\6\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\6\0\1\112\1\0\1\113"+
    "\6\233\4\0\2\233\3\0\1\112\1\233\1\0\1\233"+
    "\70\0\4\235\1\0\1\235\4\0\2\235\4\0\1\235"+
    "\1\0\1\235\67\0\1\113\6\235\4\0\2\235\4\0"+
    "\1\235\1\0\1\235\71\0\1\341\114\0\1\341\110\0"+
    "\1\242\114\0\1\242\111\0\1\242\125\0\1\342\67\0"+
    "\2\11\1\0\1\11\1\0\15\11\1\343\6\11\2\0"+
    "\3\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\1\11\1\344\1\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\10\11\1\345\13\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\35\124\1\252\55\124\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\3\11\32\0\1\346\14\11\1\0"+
    "\2\11\34\254\1\347\1\350\55\254\34\0\1\351\6\0"+
    "\1\255\52\0\2\11\1\0\1\11\1\0\16\11\1\352"+
    "\5\11\2\0\3\11\32\0\1\353\14\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\20\11\1\354\3\11"+
    "\2\0\3\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\355\3\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\356\23\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\12\11\1\357"+
    "\11\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\2\11\1\360"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\3\11\32\0\2\11\1\361\12\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\20\11"+
    "\1\362\3\11\2\0\3\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\3\11"+
    "\32\0\4\11\1\363\10\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\364\3\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\12\11\1\365\11\11\2\0\3\11\32\0\15\11"+
    "\1\0\2\11\35\145\1\274\55\145\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\366\3\11\2\0\3\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\16\11\1\367\5\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\370"+
    "\3\11\2\0\3\11\32\0\15\11\1\0\2\11\1\301"+
    "\1\0\44\301\2\0\43\301\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\2\11\1\371\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\2\0"+
    "\3\11\32\0\3\11\1\372\11\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\15\11\1\373\6\11\2\0"+
    "\2\11\1\374\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\2\0\2\11\1\375\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\3\11\32\0\7\11\1\376\5\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\377"+
    "\3\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\1\11\1\u0100\13\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\1\11\1\u0101\1\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\u0102\3\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\2\0"+
    "\3\11\32\0\1\11\1\u0103\13\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\11\11\1\u0104\3\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\2\11\1\u0105\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\1\u0106"+
    "\23\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\2\11\1\u0107\12\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\3\11\32\0\2\11\1\u0108"+
    "\12\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\1\11\1\u0109\1\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\330\1\0\1\330\1\0\24\330\2\0"+
    "\3\330\32\0\15\330\1\0\2\330\3\0\2\330\1\0"+
    "\1\330\1\0\24\330\2\0\3\330\32\0\1\u010a\14\330"+
    "\1\0\2\330\6\0\1\u010b\1\0\5\u010b\1\0\1\u010b"+
    "\2\0\1\u010b\1\0\2\u010b\3\0\4\u010b\37\0\2\u010b"+
    "\4\0\1\u010b\52\0\1\u010c\120\0\1\u010d\1\327\37\0"+
    "\3\u010d\3\0\2\330\1\0\1\330\1\0\24\330\2\0"+
    "\3\330\6\0\1\u010d\1\327\22\0\15\330\1\u010d\2\u010e"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\3\11"+
    "\32\0\2\11\1\u010f\12\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\u0110\3\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\27\0\1\u0111\66\0\2\11"+
    "\1\0\1\11\1\0\20\11\1\u0112\3\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\1\11\1\u0113\1\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\2\0\3\11\32\0\4\11\1\u0114\10\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\3\11"+
    "\32\0\5\11\1\u0115\7\11\1\0\2\11\35\254\1\350"+
    "\55\254\3\0\2\11\1\0\1\11\1\0\17\11\1\u0116"+
    "\4\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\u0117\23\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\1\11\1\u0118\1\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\10\11"+
    "\1\u0119\13\11\2\0\3\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\3\11"+
    "\32\0\1\11\1\u011a\13\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\16\11\1\u011b\5\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\1\11\1\u011c\1\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\2\0\1\11\1\u011d\1\11\32\0\15\11\1\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\24\11\2\0\2\11"+
    "\1\u011e\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\10\11\1\u011f\13\11\2\0\3\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\1\11\1\u0120\1\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\2\0"+
    "\1\u0121\2\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\24\11\2\0\2\11\1\u0122\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\16\11\1\u0123\5\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\u0124"+
    "\3\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\10\11\1\u0125\4\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\10\11\1\u0126\13\11\2\0\3\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\12\11\1\u0127\11\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\24\11\2\0"+
    "\3\11\32\0\6\11\1\u0128\6\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\u0129\3\11\2\0"+
    "\3\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\20\11\1\u012a\3\11\2\0\3\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\330\1\0\1\330\1\0"+
    "\24\330\2\0\2\330\1\u012b\32\0\15\330\1\0\2\330"+
    "\6\0\1\216\1\0\5\216\1\0\1\216\2\0\1\216"+
    "\1\0\2\216\3\0\4\216\37\0\2\216\4\0\1\216"+
    "\17\0\1\u012c\1\0\5\u012c\1\0\1\u012c\2\0\1\u012c"+
    "\1\0\2\u012c\3\0\4\u012c\6\0\1\216\30\0\2\u012c"+
    "\4\0\1\u012c\60\0\1\216\1\327\37\0\3\216\3\0"+
    "\2\330\1\0\1\330\1\0\24\330\2\0\3\330\6\0"+
    "\1\216\1\327\22\0\15\330\1\216\2\217\30\0\1\242"+
    "\65\0\2\11\1\0\1\11\1\0\24\11\2\0\2\11"+
    "\1\u012d\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\16\11\1\u012e\5\11\2\0\3\11\32\0"+
    "\15\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\20\11\1\u012f\3\11\2\0\3\11\32\0\15\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\20\11\1\u0130"+
    "\3\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\u0131\3\11\2\0"+
    "\3\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\1\u0132\23\11\2\0\3\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\2\0\2\11\1\u0133\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\1\11\1\u0134\13\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\1\u0135\2\11\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\24\11"+
    "\2\0\1\u0136\2\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\u0137\23\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\3\11\32\0\1\u0138\14\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\10\11\1\u0139"+
    "\13\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\1\u013a\2\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\3\11\32\0\1\u013b\14\11\1\0"+
    "\2\11\3\0\2\330\1\0\1\330\1\0\16\330\1\u013c"+
    "\5\330\2\0\3\330\32\0\15\330\1\0\2\330\6\0"+
    "\1\u013d\1\0\5\u013d\1\0\1\u013d\2\0\1\u013d\1\0"+
    "\2\u013d\3\0\4\u013d\6\0\1\216\30\0\2\u013d\4\0"+
    "\1\u013d\14\0\2\11\1\0\1\11\1\0\10\11\1\u013e"+
    "\13\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\24\11\2\0\3\11\32\0"+
    "\6\11\1\u013f\6\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\3\11\32\0\6\11\1\u0140"+
    "\6\11\1\0\2\11\3\0\2\11\1\0\1\11\1\0"+
    "\24\11\2\0\3\11\32\0\1\11\1\u0141\13\11\1\0"+
    "\2\11\3\0\2\11\1\0\1\11\1\0\1\u0142\23\11"+
    "\2\0\3\11\32\0\15\11\1\0\2\11\3\0\2\11"+
    "\1\0\1\11\1\0\12\11\1\u0143\11\11\2\0\3\11"+
    "\32\0\15\11\1\0\2\11\3\0\2\11\1\0\1\11"+
    "\1\0\24\11\2\0\3\11\32\0\2\11\1\u0144\12\11"+
    "\1\0\2\11\3\0\2\330\1\0\1\330\1\0\24\330"+
    "\2\0\3\330\32\0\1\330\1\u0145\13\330\1\0\2\330"+
    "\6\0\1\u0146\1\0\5\u0146\1\0\1\u0146\2\0\1\u0146"+
    "\1\0\2\u0146\3\0\4\u0146\6\0\1\216\30\0\2\u0146"+
    "\4\0\1\u0146\14\0\2\11\1\0\1\11\1\0\1\u0147"+
    "\23\11\2\0\3\11\32\0\15\11\1\0\2\11\3\0"+
    "\2\11\1\0\1\11\1\0\20\11\1\u0148\3\11\2\0"+
    "\3\11\32\0\15\11\1\0\2\11\3\0\2\11\1\0"+
    "\1\11\1\0\24\11\2\0\2\11\1\u0149\32\0\15\11"+
    "\1\0\2\11\3\0\2\11\1\0\1\11\1\0\20\11"+
    "\1\u014a\3\11\2\0\3\11\32\0\15\11\1\0\2\11"+
    "\6\0\1\u014b\1\0\5\u014b\1\0\1\u014b\2\0\1\u014b"+
    "\1\0\2\u014b\3\0\4\u014b\6\0\1\216\30\0\2\u014b"+
    "\4\0\1\u014b\17\0\1\u014c\1\0\5\u014c\1\0\1\u014c"+
    "\2\0\1\u014c\1\0\2\u014c\3\0\4\u014c\6\0\1\216"+
    "\30\0\2\u014c\4\0\1\u014c\17\0\1\u014d\1\0\5\u014d"+
    "\1\0\1\u014d\2\0\1\u014d\1\0\2\u014d\3\0\4\u014d"+
    "\6\0\1\216\30\0\2\u014d\4\0\1\u014d\53\0\1\216"+
    "\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17325];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\3\0\1\11\21\1\2\11\2\1\5\11"+
    "\1\1\2\11\11\1\3\11\12\1\2\0\1\11\1\1"+
    "\1\11\2\1\3\11\4\1\4\0\25\1\1\11\3\1"+
    "\1\0\3\1\13\11\1\1\6\11\21\1\1\11\1\0"+
    "\2\1\3\0\2\1\1\11\3\1\1\11\1\1\1\0"+
    "\1\1\4\0\1\11\2\0\4\1\1\11\3\1\1\0"+
    "\15\1\1\11\1\1\1\11\4\1\1\11\24\1\1\11"+
    "\2\1\2\0\1\1\1\0\3\1\1\11\1\0\4\1"+
    "\1\11\1\1\1\11\41\1\3\0\3\1\1\0\32\1"+
    "\1\0\20\1\1\0\10\1\1\0\4\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBufferedSequence = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBuffer;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _RustLexer() {
    this((java.io.Reader)null);
  }

  /**
    * '#+' stride demarking start/end of raw string/byte literal
    */
  private int zzShaStride = -1;

  /**
    * Starting position of raw string/byte literal
    */
  private int zzRawLiteralStart = -1;

  /**
    * Raw literal type (byte/string)
    */
  private IElementType zzRawLiteralType = null;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence seq, int start, int end,int initialState){
    zzBufferedSequence = seq;
    //zzBuffer = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(seq);
    zzBuffer = com.intellij.util.text.CharArrayUtil.fromSequence(seq);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBufferedSequence.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer != null ? zzBuffer[zzStartRead+pos]:zzBufferedSequence.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;

    //CharSequence zzBufferL = zzBuffer;
    //char[] zzBufferArrayL = zzBufferArray;

    char[] zzBufferL = zzBuffer;

    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '*')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.BLOCK_COMMENT;
          }
        case 127: break;
        case 2: 
          { yybegin(YYINITIAL);

    if (yycharat(2) == '!')
        return RustTokenElementTypes.INNER_DOC_COMMENT;
    else if (yycharat(2) == '/')
        return RustTokenElementTypes.OUTER_DOC_COMMENT;
    else
        return RustTokenElementTypes.EOL_COMMENT;
          }
        case 128: break;
        case 3: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 129: break;
        case 4: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 130: break;
        case 5: 
          { return RustTokenElementTypes.IDENTIFIER;
          }
        case 131: break;
        case 6: 
          { return RustTokenElementTypes.DOT;
          }
        case 132: break;
        case 7: 
          { return RustTokenElementTypes.MINUS;
          }
        case 133: break;
        case 8: 
          { return RustTokenElementTypes.INTEGER_LITERAL;
          }
        case 134: break;
        case 9: 
          { return RustTokenElementTypes.UNDERSCORE;
          }
        case 135: break;
        case 10: 
          { yybegin(SUFFIX); return RustTokenElementTypes.STRING_LITERAL;
          }
        case 136: break;
        case 11: 
          { return RustTokenElementTypes.LBRACE;
          }
        case 137: break;
        case 12: 
          { return RustTokenElementTypes.RBRACE;
          }
        case 138: break;
        case 13: 
          { return RustTokenElementTypes.SHA;
          }
        case 139: break;
        case 14: 
          { return RustTokenElementTypes.EXCL;
          }
        case 140: break;
        case 15: 
          { return RustTokenElementTypes.LBRACK;
          }
        case 141: break;
        case 16: 
          { yybegin(LIFETIME_OR_CHAR); yypushback(1);
          }
        case 142: break;
        case 17: 
          { return RustTokenElementTypes.RBRACK;
          }
        case 143: break;
        case 18: 
          { return RustTokenElementTypes.LPAREN;
          }
        case 144: break;
        case 19: 
          { return RustTokenElementTypes.RPAREN;
          }
        case 145: break;
        case 20: 
          { return RustTokenElementTypes.COLON;
          }
        case 146: break;
        case 21: 
          { return RustTokenElementTypes.SEMICOLON;
          }
        case 147: break;
        case 22: 
          { return RustTokenElementTypes.COMMA;
          }
        case 148: break;
        case 23: 
          { return RustTokenElementTypes.EQ;
          }
        case 149: break;
        case 24: 
          { return RustTokenElementTypes.PLUS;
          }
        case 150: break;
        case 25: 
          { return RustTokenElementTypes.OR;
          }
        case 151: break;
        case 26: 
          { return RustTokenElementTypes.AND;
          }
        case 152: break;
        case 27: 
          { return RustTokenElementTypes.LT;
          }
        case 153: break;
        case 28: 
          { return RustTokenElementTypes.XOR;
          }
        case 154: break;
        case 29: 
          { return RustTokenElementTypes.MUL;
          }
        case 155: break;
        case 30: 
          { return RustTokenElementTypes.DIV;
          }
        case 156: break;
        case 31: 
          { return RustTokenElementTypes.REM;
          }
        case 157: break;
        case 32: 
          { return RustTokenElementTypes.GT;
          }
        case 158: break;
        case 33: 
          { return RustTokenElementTypes.Q;
          }
        case 159: break;
        case 34: 
          { return RustTokenElementTypes.AT;
          }
        case 160: break;
        case 35: 
          { 
          }
        case 161: break;
        case 36: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 162: break;
        case 37: 
          { yybegin(YYINITIAL);
          }
        case 163: break;
        case 38: 
          { return RustTokenElementTypes.DOTDOT;
          }
        case 164: break;
        case 39: 
          { return RustTokenElementTypes.MINUSMINUS;
          }
        case 165: break;
        case 40: 
          { return RustTokenElementTypes.MINUSEQ;
          }
        case 166: break;
        case 41: 
          { return RustTokenElementTypes.ARROW;
          }
        case 167: break;
        case 42: 
          { return RustTokenElementTypes.FN;
          }
        case 168: break;
        case 43: 
          { yybegin(SUFFIX); return RustTokenElementTypes.BYTE_LITERAL;
          }
        case 169: break;
        case 44: 
          { return RustTokenElementTypes.IF;
          }
        case 170: break;
        case 45: 
          { return RustTokenElementTypes.IN;
          }
        case 171: break;
        case 46: 
          { yybegin(SUFFIX); return RustTokenElementTypes.RAW_STRING_LITERAL;
          }
        case 172: break;
        case 47: 
          { return RustTokenElementTypes.SHEBANG;
          }
        case 173: break;
        case 48: 
          { return RustTokenElementTypes.EXCLEQ;
          }
        case 174: break;
        case 49: 
          { return RustTokenElementTypes.COLONCOLON;
          }
        case 175: break;
        case 50: 
          { return RustTokenElementTypes.EQEQ;
          }
        case 176: break;
        case 51: 
          { return RustTokenElementTypes.FAT_ARROW;
          }
        case 177: break;
        case 52: 
          { return RustTokenElementTypes.PLUSEQ;
          }
        case 178: break;
        case 53: 
          { return RustTokenElementTypes.PLUSPLUS;
          }
        case 179: break;
        case 54: 
          { return RustTokenElementTypes.OREQ;
          }
        case 180: break;
        case 55: 
          { return RustTokenElementTypes.OROR;
          }
        case 181: break;
        case 56: 
          { return RustTokenElementTypes.ANDEQ;
          }
        case 182: break;
        case 57: 
          { return RustTokenElementTypes.ANDAND;
          }
        case 183: break;
        case 58: 
          { return RustTokenElementTypes.LTEQ;
          }
        case 184: break;
        case 59: 
          { return RustTokenElementTypes.LTLT;
          }
        case 185: break;
        case 60: 
          { return RustTokenElementTypes.XOREQ;
          }
        case 186: break;
        case 61: 
          { return RustTokenElementTypes.MULEQ;
          }
        case 187: break;
        case 62: 
          { return RustTokenElementTypes.DIVEQ;
          }
        case 188: break;
        case 63: 
          { yybegin(BLOCK_COMMENT); yypushback(2);
          }
        case 189: break;
        case 64: 
          { yybegin(EOL_COMMENT);   yypushback(2);
          }
        case 190: break;
        case 65: 
          { return RustTokenElementTypes.REMEQ;
          }
        case 191: break;
        case 66: 
          { return RustTokenElementTypes.AS;
          }
        case 192: break;
        case 67: 
          { return RustTokenElementTypes.DO;
          }
        case 193: break;
        case 68: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.LIFETIME;
          }
        case 194: break;
        case 69: 
          { int shaExcess = yylength() - 1 - zzShaStride;
    if (shaExcess >= 0) {
      yybegin(SUFFIX);
      yypushback(shaExcess);

      zzStartRead = zzRawLiteralStart;

      zzShaStride       = -1;
      zzRawLiteralStart = -1;

      return zzRawLiteralType;
    }
          }
        case 195: break;
        case 70: 
          { return RustTokenElementTypes.DOTDOTDOT;
          }
        case 196: break;
        case 71: 
          { return RustTokenElementTypes.FOR;
          }
        case 197: break;
        case 72: 
          // lookahead expression with fixed lookahead length
          zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 198: break;
        case 73: 
          { return RustTokenElementTypes.FLOAT_LITERAL;
          }
        case 199: break;
        case 74: 
          { return RustTokenElementTypes.BOX;
          }
        case 200: break;
        case 75: 
          { yybegin(SUFFIX); return RustTokenElementTypes.RAW_BYTE_LITERAL;
          }
        case 201: break;
        case 76: 
          { return RustTokenElementTypes.USE;
          }
        case 202: break;
        case 77: 
          { return RustTokenElementTypes.REF;
          }
        case 203: break;
        case 78: 
          { yybegin(RAW_LITERAL);

                                    zzRawLiteralStart = zzStartRead;
                                    zzRawLiteralType  = RustTokenElementTypes.RAW_STRING_LITERAL;
                                    zzShaStride       = yylength() - 2;
          }
        case 204: break;
        case 79: 
          { return RustTokenElementTypes.SHEBANG_LINE;
          }
        case 205: break;
        case 80: 
          { return RustTokenElementTypes.LTLTEQ;
          }
        case 206: break;
        case 81: 
          { return RustTokenElementTypes.LET;
          }
        case 207: break;
        case 82: 
          { return RustTokenElementTypes.MOD;
          }
        case 208: break;
        case 83: 
          { return RustTokenElementTypes.MUT;
          }
        case 209: break;
        case 84: 
          { return RustTokenElementTypes.PUB;
          }
        case 210: break;
        case 85: 
          { yybegin(SUFFIX);    return RustTokenElementTypes.CHAR_LITERAL;
          }
        case 211: break;
        case 86: 
          { yybegin(RAW_LITERAL);
                                    zzRawLiteralStart = zzStartRead;
                                    zzRawLiteralType  = RustTokenElementTypes.RAW_BYTE_LITERAL;
                                    zzShaStride       = yylength() - 3;
          }
        case 212: break;
        case 87: 
          { return RustTokenElementTypes.SELF;
          }
        case 213: break;
        case 88: 
          { return RustTokenElementTypes.IMPL;
          }
        case 214: break;
        case 89: 
          { return RustTokenElementTypes.ENUM;
          }
        case 215: break;
        case 90: 
          { return RustTokenElementTypes.ELSE;
          }
        case 216: break;
        case 91: 
          { return RustTokenElementTypes.TRUE;
          }
        case 217: break;
        case 92: 
          { return RustTokenElementTypes.TYPE;
          }
        case 218: break;
        case 93: 
          { return RustTokenElementTypes.LOOP;
          }
        case 219: break;
        case 94: 
          { return RustTokenElementTypes.MOVE;
          }
        case 220: break;
        case 95: 
          { return RustTokenElementTypes.PURE;
          }
        case 221: break;
        case 96: 
          { return RustTokenElementTypes.PROC;
          }
        case 222: break;
        case 97: 
          { return RustTokenElementTypes.PRIV;
          }
        case 223: break;
        case 98: 
          { return RustTokenElementTypes.CSELF;
          }
        case 224: break;
        case 99: 
          { return RustTokenElementTypes.FINAL;
          }
        case 225: break;
        case 100: 
          { return RustTokenElementTypes.FALSE;
          }
        case 226: break;
        case 101: 
          { return RustTokenElementTypes.BREAK;
          }
        case 227: break;
        case 102: 
          { return RustTokenElementTypes.SUPER;
          }
        case 228: break;
        case 103: 
          { return RustTokenElementTypes.TRAIT;
          }
        case 229: break;
        case 104: 
          { return RustTokenElementTypes.CONST;
          }
        case 230: break;
        case 105: 
          { return RustTokenElementTypes.CRATE;
          }
        case 231: break;
        case 106: 
          { return RustTokenElementTypes.MATCH;
          }
        case 232: break;
        case 107: 
          { return RustTokenElementTypes.MACRO;
          }
        case 233: break;
        case 108: 
          { return RustTokenElementTypes.YIELD;
          }
        case 234: break;
        case 109: 
          { return RustTokenElementTypes.WHILE;
          }
        case 235: break;
        case 110: 
          { return RustTokenElementTypes.WHERE;
          }
        case 236: break;
        case 111: 
          { return RustTokenElementTypes.BECOME;
          }
        case 237: break;
        case 112: 
          { return RustTokenElementTypes.UNSAFE;
          }
        case 238: break;
        case 113: 
          { return RustTokenElementTypes.SIZEOF;
          }
        case 239: break;
        case 114: 
          { return RustTokenElementTypes.STRUCT;
          }
        case 240: break;
        case 115: 
          { return RustTokenElementTypes.STATIC;
          }
        case 241: break;
        case 116: 
          { return RustTokenElementTypes.EXTERN;
          }
        case 242: break;
        case 117: 
          { return RustTokenElementTypes.RETURN;
          }
        case 243: break;
        case 118: 
          { return RustTokenElementTypes.TYPEOF;
          }
        case 244: break;
        case 119: 
          { return RustTokenElementTypes.UNSIZED;
          }
        case 245: break;
        case 120: 
          { return RustTokenElementTypes.ALIGNOF;
          }
        case 246: break;
        case 121: 
          { return RustTokenElementTypes.VIRTUAL;
          }
        case 247: break;
        case 122: 
          { yybegin(YYINITIAL); return RustTokenElementTypes.STATIC_LIFETIME;
          }
        case 248: break;
        case 123: 
          { return RustTokenElementTypes.OFFSETOF;
          }
        case 249: break;
        case 124: 
          { return RustTokenElementTypes.OVERRIDE;
          }
        case 250: break;
        case 125: 
          { return RustTokenElementTypes.ABSTRACT;
          }
        case 251: break;
        case 126: 
          { return RustTokenElementTypes.CONTINUE;
          }
        case 252: break;

        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;

            switch (zzLexicalState) {
            case LIFETIME_OR_CHAR: {
              yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
            case 334: break;
            case RAW_LITERAL: {
              zzShaStride       = -1;
              zzRawLiteralStart = -1;
            }
            case 335: break;
            default:
            return null;
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
